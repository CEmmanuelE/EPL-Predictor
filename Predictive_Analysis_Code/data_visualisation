import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency

# Load the prepared dataset
combined_data = pd.read_csv('/Users/emmanuel/Downloads/Final Dissertation/combined_seasons_data_prepared.csv')

# Set up Seaborn styling
sns.set(style="whitegrid")

# Plot: Goal Difference by Match Outcome (FTR)
plt.figure(figsize=(14, 7))
plt.subplot(1, 2, 1)
sns.boxplot(x='FTR', y='GoalDifference', data=combined_data)
plt.title('Goal Difference by Match Outcome')
plt.xlabel('Match Outcome (H=Home Win, D=Draw, A=Away Win)')
plt.ylabel('Goal Difference')

# Plot: Home Team Form by Match Outcome
plt.subplot(1, 2, 2)
sns.boxplot(x='FTR', y='HomeTeamForm', data=combined_data)
plt.title('Home Team Form by Match Outcome')
plt.xlabel('Match Outcome')
plt.ylabel('Home Team Form')

plt.tight_layout()
plt.show()

# Correlation Matrix
correlation_matrix = combined_data[['GoalDifference', 'HomeTeamForm', 'AwayTeamForm']].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Features')
plt.show()

# Chi-square test: Home Team Form and Match Outcome
contingency_table = pd.crosstab(combined_data['FTR'], combined_data['HomeTeamForm'] > 2)
chi2, p, dof, expected = chi2_contingency(contingency_table)
print(f"Chi-square statistic: {chi2}")
print(f"P-value: {p}")


# Figure 4.1: Comparison of Model Accuracy
models = ['Naive Bayes', 'Random Forest', 'Bayesian Network', 'Logistic Regression']
accuracy = [99.47, 100, 98.5, 97.2]

plt.figure(figsize=(8,6))
plt.bar(models, accuracy, color=['blue', 'green', 'orange', 'red'])
plt.title('Comparison of Model Accuracy')
plt.xlabel('Model')
plt.ylabel('Accuracy (%)')
plt.ylim([95, 101])
plt.show()

# Figure 4.2: Processing Time vs Number of Features (Naive Bayes and Random Forest)
features = [5, 10, 15, 20, 25]
naive_bayes_time = [0.05, 0.07, 0.09, 0.12, 0.15]
random_forest_time = [0.12, 0.25, 0.52, 1.03, 2.18]

plt.figure(figsize=(8,6))
plt.plot(features, naive_bayes_time, label='Naive Bayes', marker='o')
plt.plot(features, random_forest_time, label='Random Forest', marker='o')
plt.title('Processing Time vs Number of Features')
plt.xlabel('Number of Features')
plt.ylabel('Processing Time (seconds)')
plt.legend()
plt.grid(True)
plt.show()